version: '3.8'

# {json:scada} Demo - (c) 2021 - Ricardo L. Olsen 

# ACCESS VIA WEB BROWSER AT http://127.0.0.1:8080
# Credentials for JSON-SCADA and Grafana: user=admin password=jsonscada
# Must be online to connect to the IEC60870-5-104 live demo server at 207.180.242.96:2404. 

services:

# NO AUTHENTICATION IS PROVIDED HERE FOR MONGODB AND POSTGRESQL!

  # must create a mongodb instance or cluster with a replica set
  jsdemo_mongorsn1:
    image: ricardolo/json-scada-mongodb
    container_name: jsdemo_mongors1
    hostname: jsdemo_mongorsn1
    restart: unless-stopped
    command: "mongod --bind_ip_all --replSet rs1 --wiredTigerCacheSizeGB 2 --dbpath /data/db --port 27017"    
    extra_hosts:
      - "jsdemo_mongorsn1:127.0.0.1"
    environment:
      - MONGO_INITDB_DATABASE=json_scada
    # to export mongodb port on main host!
    ports:
      - "27017:27017"
    # internal container port
    expose:
      - "27017"
    networks:
      - jsdemo_net
  
  # Postgresql/TimescaleDB historian. Without auth! 
  timescaledb:
    image: ricardolo/json-scada-timescaledb
    container_name: jsdemo_timescaledb
    restart: unless-stopped
    command: postgres -c shared_preload_libraries=timescaledb
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      #- POSTGRES_PASSWORD=passw0rd
    # to export postgresql port on main host!
    ports:
      - 5432:5432
    # internal container port
    expose:
      - "5432"
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

<<<<<<< HEAD
  # Postgresql/TimescaleDB Process SQL hist files 
  process_pg_hist:
    image: timescale/timescaledb:latest-pg12
    container_name: jsdemo_process_pg_hist
    command: /sql/process_pg_hist.sh
    restart: unless-stopped
    environment:
      - PSQL_PATH=/usr/local/bin
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    restart: unless-stopped
    volumes:
      - ./sql:/sql
    links:
      - jsdemo_mongorsn1
      - timescaledb
    networks:
      - jsdemo_net

  # Postgresql/TimescaleDB Process SQL current data files 
  process_pg_rtdata:
    image: timescale/timescaledb:latest-pg12
    container_name: jsdemo_process_pg_rtdata
    command: /sql/process_pg_rtdata.sh
    restart: unless-stopped
    environment:
      - PSQL_PATH=/usr/local/bin
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    restart: unless-stopped
    volumes:
      - ./sql:/sql
    links:
      - jsdemo_mongorsn1
      - timescaledb
    networks:
      - jsdemo_net
=======
>>>>>>> 936bb26... Docker demo updated. New method added with dedicated containers provided by the project.
  grafana:
    image: ricardolo/json-scada-grafana
    container_name: jsdemo_grafana
    restart: unless-stopped
    environment: 
      - GF_SERVER_DOMAIN=127.0.0.1
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:8080/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    # export grafana port to the host
    ports:
      - 3000:3000
    expose:
      - "3000"
    links:
      - timescaledb
    networks:
      - jsdemo_net

#  grafana:
#    image: grafana/grafana
#    container_name: jsdemo_grafana
#    restart: unless-stopped
#    volumes: 
#      - ./grafana_data:/var/lib/grafana
#    environment: 
#      - GF_SERVER_DOMAIN=127.0.0.1
#      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:8080/grafana/
#      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    # export grafana port to the host
#    ports:
#      - 3000:3000
#    expose:
#      - "3000"
#    links:
#      - timescaledb
#    networks:
#      - jsdemo_net
  
  # IEC6079-5-104 CLIENT, will connect to a demo server on 207.180.242.96:2404
  iec104client:
    image: ricardolo/json-scada
    container_name: jsdemo_iec104client
    command: sh -c "sleep 20 && cd /json-scada/bin/ && ./iec104client"
    restart: unless-stopped
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # IEC6079-5-104 SERVER, accepts connection on 127.0.0.1:2404 (originator address 1)
  iec104server:
    image: ricardolo/json-scada
    container_name:  jsdemo_iec104server
    command: sh -c "sleep 20 && cd /json-scada/bin/ && ./iec104server"
    restart: unless-stopped
    links:
      - jsdemo_mongorsn1
    # exports the iec 104 server port to the host
    ports:
      - 2404:2404
    expose:
      - "2404"
    networks:
      - jsdemo_net

  # process incoming data and forward historical data to postgresql
  cs_data_processor:
    image: ricardolo/json-scada
    container_name: jsdemo_cs_data_processor
    command:  sh -c "cd /json-scada/sql/ && /json-scada/sql/process_pg_hist.sh & /json-scada/sql/process_pg_rtdata.sh & cd /json-scada/src/cs_data_processor && sleep 10 && node cs_data_processor.js"
    restart: unless-stopped
    environment:
      - PSQL_PATH=/usr/bin
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    links:
      - jsdemo_mongorsn1
      - timescaledb
    networks:
      - jsdemo_net

  # realtime web server, will listen on some HTTP port NO AUTH/RBAC
  #server_realtime:
  #  image: ricardolo/json-scada
  #  container_name: jsdemo_server_realtime
  #  command:  sh -c "cd /json-scada/src/server_realtime && sleep 10 && node index.js"
  #  restart: unless-stopped
  #  environment:
  #    - JS_IP_BIND=0.0.0.0
  #    - JS_HTTP_PORT=8080
  #    - JS_GRAFANA_SERVER=http://jsdemo_grafana:3000
  #    - JS_AUTHENTICATION=NOAUTH
  #    - PGPORT=5432
  #    - PGHOST=jsdemo_timescaledb
  #    - PGDATABASE=json_scada
  #    - PGUSER=json_scada
  #    - PGPASSWORD=
  #  links:
  #    - jsdemo_mongorsn1
  #  # exports the HTTP port to the main host
  #  ports:
  #    - 8080:8080
  #  expose:
  #    - "8080"
  #  networks:
  #    - jsdemo_net

  # realtime web server, will listen on some HTTP port with auth, RBAC management UI
  server_realtime:
    image: ricardolo/json-scada
    container_name: jsdemo_server_realtime_auth
    command:  sh -c "cd /json-scada/src/server_realtime_auth && sleep 10 && node index.js"
    restart: unless-stopped
    environment:
      - JS_IP_BIND=0.0.0.0
      - JS_HTTP_PORT=8080
      - JS_GRAFANA_SERVER=http://jsdemo_grafana:3000
      - JS_AUTHENTICATION=NOAUTH
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
<<<<<<< HEAD
    volumes:
      - ../src/server_realtime:/server_realtime
      - ../src/htdocs:/htdocs
      - ./conf:/conf
=======
>>>>>>> 936bb26... Docker demo updated. New method added with dedicated containers provided by the project.
    links:
      - jsdemo_mongorsn1
    # exports the HTTP port to the main host
    ports:
      - 8080:8080
    expose:
      - "8080"
    networks:
      - jsdemo_net
    
  # calculation process
  calculations:
    image: ricardolo/json-scada
    container_name: jsdemo_calculations
    command:  sh -c "sleep 15 && cd /json-scada/bin/ && ./calculations"
    restart: unless-stopped
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

## Metabase for dashboards (can connect to MONGODB and POSTGRESQL)
#  metabase:
#    image: metabase/metabase:latest
#    container_name: jsdemo_metabase
#    restart: unless-stopped
#    ports:
#      - 3001:3000
#    links:
#      - jsdemo_mongorsn1
#      - timescaledb
#    networks:
#      - jsdemo_net

networks:
  jsdemo_net:
    driver: bridge
